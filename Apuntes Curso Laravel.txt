Configuración de laravel
En nuestro archivo .env encontraremos mucha información sobre cómo se está configurando Laravel como el nombre, el entorno de desarrollo, si muestra o no debug, la URL de nuestra app, datos de conexión a nuestra base de datos, entre otras opciones.

Toda la configuración que hacemos realmente se está llamando dentro de los archivos que están en la carpeta config

Si vienes del curso de introducción a PHP, seguramente tienes PHPMyAdmin el cual puedes seguir usando o puedes cambiar a cualquier cliente que te guste.

Cómo funcionan las Migraciones de DB
Laravel ofrece un sistema de migraciones de bases de datos las cuales pueden ser vistas como una especie de control de código pero para bases de datos. Esto es muy útil para equipos de trabajo al poder tener los cambios en el repositorio y de esta manera cada miembro del equipo podrá ejecutar las migraciones para tener los esquemas adecuados.

Tenemos un comando llamado make:migration que nos permite generar archivos de migraciones.
Contamos con una sección entera llamada migrate que nos servirá para realizar diferentes acciones relacionadas con las migraciones. Si ejecutamos migrate sin nada más, ejecutará todas las migraciones pendientes en el equipo.
migrate:fresh va a borrar todas las tablas y las creará de nuevo utilizando todas las migraciones que tenemos.
migrate:rollback nos permite regresar un paso.
Puedes encontrar las migraciones en la carpeta database/migrations. Laravel nos ofrece dos migraciones de inicio que son para crear tablas de usuarios y para crear una tabla de resets de passwords.
Las migraciones tienen dos partes:

up, que nos dice qué va a crear la migración.
down, que revierte lo que se hizo en la migración, activado al hacer rollback.
Al correr las migraciones se nos crearán 3 tablas, una de ella siendo migrations que nos llevará el control de cómo se va generando cada cambio.

Laravel nos ofrece Schema que nos trae diferentes cosas para trabajar sobre los sistemas de bases de datos.

Laravel 5.4: Specified key was too long error

    use Illuminate\Support\Facades\Schema;

    public function boot()
    {
        Schema::defaultStringLength(191);
    }

LARAVEL
    composer install
    php artisan key:generate
    copy .env.example .env
    composer dump-autoload
    php artisan migrate:fresh
    php artisan db:seed
    php artisan serve

Modelos con Eloquent
Un ORM es un sistema que nos permite mapear registros de la base de datos a objetos dentro dentro de nuestro código. No es exclusivo de PHP ya que se usa mucho en los lenguajes de programación orientada a objetos.

make:model crea una nueva clase para representar un modelo de Eloquent.
Cuando creamos las bases de datos es estándar que las tablas tengan el nombre en plural pero los modelos como representan una clase que representa un objeto, tendrán su nombre en singular.
Todos los modelos los podremos encontrar dentro de la carpeta app. Laravel no tiene carpeta models porque los creadores creen que model puede tener muchos significados.
El comando tinker nos ofrece un entorno de pruebas para ver cómo funcionan las cosas que estamos haciendo. Tiene en cuenta variables de entorno, lo que inicializa Laravel y también sabe que estamos usando Eloquent.